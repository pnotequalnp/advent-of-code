-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Advent of Code framework
--   
--   Framework for automatically fetching, testing, benchmarking, and
--   submitting AoC problems
@package advent-of-code
@version 0.2.1.0


-- | <h1>Advent.Of.Code.CLI</h1>
--   
--   Basic CLI parser for the framework.
module Advent.Of.Code.CLI

-- | Advent of Code framework CLI option parser.
parser :: ParserInfo Opts

-- | Run a program description.
--   
--   Parse command line arguments. Display help text and exit if any parse
--   error occurs.
execParser :: ParserInfo a -> IO a

-- | The possible modes of action.
data Action

-- | Compute solution and submit via the AoC API
Submit :: Action

-- | Show the input without computing the solution
ShowInput :: Action

-- | Compute and print the solution without submitting
ShowOutput :: Action

-- | Show the prompt without computing the solution
ShowPrompt :: Action

-- | Test solutions against the examples provided in a file
Test :: FilePath -> Action

-- | Benchmark solutions against the input
Benchmark :: Action

-- | Show version and exit
Version :: Action

-- | Where to fetch the input from.
data InputSource

-- | Fetch from the AoC API
API :: InputSource

-- | Read from stdin
Stdin :: InputSource

-- | Read from the specified file
InputFile :: FilePath -> InputSource

-- | The configuration for the framework.
data Opts
MkOpts :: Maybe Day -> Maybe Part -> Action -> InputSource -> Opts
[day] :: Opts -> Maybe Day
[part] :: Opts -> Maybe Part
[action] :: Opts -> Action
[inputSource] :: Opts -> InputSource


-- | <h1>Advent.Of.Code.Input</h1>
--   
--   Basic convenience functions for manipulating AoC inputs.
module Advent.Of.Code.Input

-- | Break the input into lines and parse them using a <tt>Show</tt>
--   instance.
list :: Read a => Text -> [a]

-- | Break the input into lines.
plainList :: Text -> [Text]

-- | Break the input into lines and parse them by words using a provided
--   function.
wordsList :: ([Text] -> a) -> Text -> [a]

-- | Break the input into lines and parse them using a provided function.
customList :: (Text -> a) -> Text -> [a]

-- | Break the input into lines and parse them by words using a provided
--   effectful parser.
wordsList' :: Applicative f => ([Text] -> f a) -> Text -> f [a]

-- | Break the input into lines and parse them using a provided effectful
--   parser.
customList' :: Applicative f => (Text -> f a) -> Text -> f [a]

-- | Break the input into lines and parse them using a <tt>Show</tt>
--   instance.
nonEmpty :: Read a => Text -> NonEmpty a

-- | Break the input into lines.
plainNonEmpty :: Text -> NonEmpty Text

-- | Break the input into lines and parse them by words using a provided
--   function.
wordsNonEmpty :: ([Text] -> a) -> Text -> NonEmpty a

-- | Break the input into lines and parse them using a provided function.
customNonEmpty :: (Text -> a) -> Text -> NonEmpty a

-- | Break the input into lines and parse them by words using a provided
--   effectful parser.
wordsNonEmpty' :: Applicative f => ([Text] -> f a) -> Text -> f (NonEmpty a)

-- | Break the input into lines and parse them using a provided effectful
--   parser.
customNonEmpty' :: Applicative f => (Text -> f a) -> Text -> f (NonEmpty a)

-- | Parse a <tt>Text</tt> value using a <tt>Show</tt> instance.
readt :: Read a => Text -> a


-- | <h1>Advent.Of.Code.Test.Types</h1>
--   
--   Types for constructing tests of solutions.
module Advent.Of.Code.Test.Types

-- | A single test, consisting of a given input and expected output.
data Test
Test :: Text -> Text -> Test
[input] :: Test -> Text
[output] :: Test -> Text

-- | A set of tests, organized by day and part.
type Tests = Map (Day, Part) [Test]
instance GHC.Show.Show Advent.Of.Code.Test.Types.Test
instance GHC.Generics.Generic Advent.Of.Code.Test.Types.Test
instance GHC.Classes.Eq Advent.Of.Code.Test.Types.Test


-- | <h1>Advent.Of.Code.Test.Parsing</h1>
--   
--   TOML parsing utilities for Advent of Code solution tests.
module Advent.Of.Code.Test.Parsing

-- | Generate TOML for the given <a>Tests</a>.
generateTests :: Tests -> Text

-- | Parse TOML into <a>Tests</a>.
parseTests :: Text -> Either [TomlDecodeError] Tests

-- | Converts <a>TomlDecodeError</a>s into pretty human-readable text.
prettyTomlDecodeErrors :: [TomlDecodeError] -> Text


-- | <h1>Advent.Of.Code.Test</h1>
--   
--   Generation of HUnit tests for Advent of Code solutions given some
--   example input/output pairs.
module Advent.Of.Code.Test

-- | A single test, consisting of a given input and expected output.
data Test
Test :: Text -> Text -> Test
[input] :: Test -> Text
[output] :: Test -> Text

-- | A set of tests, organized by day and part.
type Tests = Map (Day, Part) [Test]

-- | Generate tests for the given solutions and examples.
makeTests :: (Day -> Part -> Maybe (Text -> Text)) -> Tests -> TestTree


-- | <h1>Advent.Of.Code</h1>
--   
--   A framework for fetching inputs, submitting solutions, testing
--   examples, and benchmarking solutions for <a>Advent of Code</a>.
module Advent.Of.Code

-- | The primary entry point for the framework. The solutions are expected
--   as a function that takes the day and part and returns a <tt>Maybe
--   (Text -&gt; Text)</tt>. That <tt>Text -&gt; Text</tt> is used to
--   compute the solution from the input, if it exists.
runAdvent :: Integer -> (Day -> Part -> Maybe (Text -> Text)) -> IO ()

-- | Entry point that specifies the version of your solutions with the
--   <tt>--version</tt> option. See <a>runAdvent</a>.
runAdvent' :: Maybe Version -> Integer -> (Day -> Part -> Maybe (Text -> Text)) -> IO ()

-- | The day of a challenge.
data Day
Day1 :: Day
Day2 :: Day
Day3 :: Day
Day4 :: Day
Day5 :: Day
Day6 :: Day
Day7 :: Day
Day8 :: Day
Day9 :: Day
Day10 :: Day
Day11 :: Day
Day12 :: Day
Day13 :: Day
Day14 :: Day
Day15 :: Day
Day16 :: Day
Day17 :: Day
Day18 :: Day
Day19 :: Day
Day20 :: Day
Day21 :: Day
Day22 :: Day
Day23 :: Day
Day24 :: Day
Day25 :: Day

-- | A given part of a problem. All Advent of Code challenges are
--   two-parts.
--   
--   You can usually get <a>Part1</a> (if it is already released) with a
--   nonsense session key, but <a>Part2</a> always requires a valid session
--   key.
data Part
Part1 :: Part
Part2 :: Part
instance GHC.Enum.Enum Advent.Of.Code.Day
